{"hash":"40ddb27da864f49af9fbdeee4ebe42b3ffad8e8a","data":{"post":{"title":"Javascript 2D pathfinding algorithm with a turns limit","date":"2021.04.15","description":"Here, I'll explained my solution to check if two points can be connected by a line with a turns limit, like in the game 4Rivers. I'm sure it's poorly implemented, not optimized but it works !","content":"<h1 id=\"notes\"><a href=\"#notes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Notes</h1>\n<ul>\n<li>This algorithm will not always returns the shortest distance or minimal turns.</li>\n<li>Diagonal movements are not possibles.</li>\n</ul>\n<h1 id=\"the-code\"><a href=\"#the-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The code</h1>\n<p><a href=\"/rivers\">Demo</a> (Enable debug mode)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/* \n  a and b are coordinates\n  a = {\n    x: 3,\n    y: 1,\n  };\n\n  b = {\n    x: 15,\n    y: 9,\n  };\n\n  m is a 2d array containing either a id or null\n  */</span>\n\n  <span class=\"token comment\">//Determine which direction to explore first</span>\n\n  <span class=\"token keyword\">let</span> dy <span class=\"token operator\">=</span> slotB<span class=\"token punctuation\">.</span><span class=\"token property-access\">row</span> <span class=\"token operator\">-</span> slotA<span class=\"token punctuation\">.</span><span class=\"token property-access\">row</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> dx <span class=\"token operator\">=</span> slotB<span class=\"token punctuation\">.</span><span class=\"token property-access\">col</span> <span class=\"token operator\">-</span> slotA<span class=\"token punctuation\">.</span><span class=\"token property-access\">col</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> dx <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> dx <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> dy <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> dy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  d <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">d</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Path</span>\n  <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Current position is set to a</span>\n\n  <span class=\"token comment\">//Recursive method</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">explore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//If is the destination then return full path</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Get last position</span>\n    <span class=\"token keyword\">const</span> l <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> p<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Consider each directions</span>\n    <span class=\"token keyword\">const</span> w <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> d<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//Calculate coordinates to consider</span>\n      <span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If coordinates outside of limits then skip</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">>=</span> m<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">>=</span> m<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If is previous then skip</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&amp;&amp;</span> l<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">&amp;&amp;</span> l<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If unpassable then skip</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> tt <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//If turning then subtract one</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n        tt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If can't turn then skip</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If no more turns and not aligned then skip</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tt <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//Calculate proximity as a score</span>\n      <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">abs</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">-</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">abs</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span> <span class=\"token operator\">-</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If last turn and passing by B then skip</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> v <span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span><span class=\"token property-access\">v</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//Add direction to array of possibles directions</span>\n      w<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">y</span><span class=\"token punctuation\">,</span> v<span class=\"token operator\">:</span> v<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> tt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//If this direction leads to destination, don't considers others</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//Sort directions by best proximity</span>\n    w<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aa<span class=\"token punctuation\">,</span> bb</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> aa<span class=\"token punctuation\">.</span><span class=\"token property-access\">v</span> <span class=\"token operator\">-</span> bb<span class=\"token punctuation\">.</span><span class=\"token property-access\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Explore recursively directions</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">explore</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//the function returns the path if there's one, else it returns null </span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">explore</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Turns limit of 2</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"possible-improvements\"><a href=\"#possible-improvements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Possible improvements</h1>\n<ul>\n<li>Look around B to check which sides are not blocked by a impassable tile.</li>\n<li>Instead of a recursive method, maybe use a simple loop who would check the next most promising tile.</li>\n</ul>\n"}},"context":{}}